// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:33:07
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the classroom v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages classes, rosters, and invitations in Google Classroom.
// API Documentation Link https://developers.google.com/classroom/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/classroom/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.classroom.v1/ 
// Install Command: PM>  Install-Package Google.Apis.classroom.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.classroom.v1;
using Google.Apis.classroom.v1.Data;
using System;

namespace GoogleSamplecSharpSample.classroomv1.Methods
{
  
    public static class StudentSubmissionsSample
    {


        /// <summary>
        /// Returns a student submission. * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, course work, or student submission or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/studentSubmissions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated classroom service.</param>  
        /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
        /// <param name="courseWorkId">Identifier of the course work.</param>
        /// <param name="id">Identifier of the student submission.</param>
        /// <returns>StudentSubmissionResponse</returns>
        public static StudentSubmission Get(classroomService service, string courseId, string courseWorkId, string id)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (courseWorkId == null)
                    throw new ArgumentNullException(courseWorkId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.StudentSubmissions.Get(courseId, courseWorkId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request StudentSubmissions.Get failed.", ex);
            }
        }

        public class StudentSubmissionsPatchOptionalParms
        {
            /// Mask that identifies which fields on the student submission to update. This field is required to do an update. The update fails if invalid fields are specified. The following fields may be specified by teachers: * `draft_grade` * `assigned_grade`
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates one or more fields of a student submission. See google.classroom.v1.StudentSubmission for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/studentSubmissions/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated classroom service.</param>  
        /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
        /// <param name="courseWorkId">Identifier of the course work.</param>
        /// <param name="id">Identifier of the student submission.</param>
        /// <param name="body">A valid classroom v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>StudentSubmissionResponse</returns>
        public static StudentSubmission Patch(classroomService service, string courseId, string courseWorkId, string id, StudentSubmission body, StudentSubmissionsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (courseWorkId == null)
                    throw new ArgumentNullException(courseWorkId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Building the initial request.
                var request = service.StudentSubmissions.Patch(body, courseId, courseWorkId, id);

                // Applying optional parameters to the request.                
                request = (StudentSubmissionsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request StudentSubmissions.Patch failed.", ex);
            }
        }

        public class StudentSubmissionsListOptionalParms
        {
            /// Optional argument to restrict returned student work to those owned by the student with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
            public string UserId { get; set; }  
            /// Requested submission states. If specified, returned student submissions match one of the specified submission states.
            public string States { get; set; }  
            /// Requested lateness value. If specified, returned student submissions are restricted by the requested value. If unspecified, submissions are returned regardless of `late` value.
            public string Late { get; set; }  
            /// Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.
            public int PageSize { get; set; }  
            /// nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Returns a list of student submissions that the requester is permitted to view, factoring in the OAuth scopes of the request. `-` may be specified as the `course_work_id` to include student submissions for multiple course work items. Course students may only view their own work. Course teachers and domain administrators may view all student submissions. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/studentSubmissions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated classroom service.</param>  
        /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
        /// <param name="courseWorkId">Identifer of the student work to request. This may be set to the string literal `"-"` to request student work for all course work in the specified course.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>ListStudentSubmissionsResponseResponse</returns>
        public static ListStudentSubmissionsResponse List(classroomService service, string courseId, string courseWorkId, StudentSubmissionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (courseWorkId == null)
                    throw new ArgumentNullException(courseWorkId);

                // Building the initial request.
                var request = service.StudentSubmissions.List(courseId, courseWorkId);

                // Applying optional parameters to the request.                
                request = (StudentSubmissionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request StudentSubmissions.List failed.", ex);
            }
        }


        /// <summary>
        /// Turns in a student submission. Turning in a student submission transfers ownership of attached Drive files to the teacher and may also update the submission state. This may only be called by the student that owns the specified student submission. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, turn in the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/studentSubmissions/turnIn
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated classroom service.</param>  
        /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
        /// <param name="courseWorkId">Identifier of the course work.</param>
        /// <param name="id">Identifier of the student submission.</param>
        /// <param name="body">A valid classroom v1 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty TurnIn(classroomService service, string courseId, string courseWorkId, string id, TurnInStudentSubmissionRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (courseWorkId == null)
                    throw new ArgumentNullException(courseWorkId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.StudentSubmissions.TurnIn(body, courseId, courseWorkId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request StudentSubmissions.TurnIn failed.", ex);
            }
        }


        /// <summary>
        /// Reclaims a student submission on behalf of the student that owns it. Reclaiming a student submission transfers ownership of attached Drive files to the student and update the submission state. Only the student that ownes the requested student submission may call this method, and only for a student submission that has been turned in. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, unsubmit the requested student submission, or for access errors. * `FAILED_PRECONDITION` if the student submission has not been turned in. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/studentSubmissions/reclaim
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated classroom service.</param>  
        /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
        /// <param name="courseWorkId">Identifier of the course work.</param>
        /// <param name="id">Identifier of the student submission.</param>
        /// <param name="body">A valid classroom v1 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Reclaim(classroomService service, string courseId, string courseWorkId, string id, ReclaimStudentSubmissionRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (courseWorkId == null)
                    throw new ArgumentNullException(courseWorkId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.StudentSubmissions.Reclaim(body, courseId, courseWorkId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request StudentSubmissions.Reclaim failed.", ex);
            }
        }


        /// <summary>
        /// Returns a student submission. Returning a student submission transfers ownership of attached Drive files to the student and may also update the submission state. Unlike the Classroom application, returning a student submission does not set assignedGrade to the draftGrade value. Only a teacher of the course that contains the requested student submission may call this method. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, return the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/studentSubmissions/return
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated classroom service.</param>  
        /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
        /// <param name="courseWorkId">Identifier of the course work.</param>
        /// <param name="id">Identifier of the student submission.</param>
        /// <param name="body">A valid classroom v1 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Return(classroomService service, string courseId, string courseWorkId, string id, ReturnStudentSubmissionRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (courseWorkId == null)
                    throw new ArgumentNullException(courseWorkId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.StudentSubmissions.Return(body, courseId, courseWorkId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request StudentSubmissions.Return failed.", ex);
            }
        }


        /// <summary>
        /// Modifies attachments of student submission. Attachments may only be added to student submissions whose type is `ASSIGNMENT`. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, if the user is not permitted to modify attachments on the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist. 
        /// Documentation https://developers.google.com/classroom/v1/reference/studentSubmissions/modifyAttachments
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated classroom service.</param>  
        /// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
        /// <param name="courseWorkId">Identifier of the course work.</param>
        /// <param name="id">Identifier of the student submission.</param>
        /// <param name="body">A valid classroom v1 body.</param>
        /// <returns>StudentSubmissionResponse</returns>
        public static StudentSubmission ModifyAttachments(classroomService service, string courseId, string courseWorkId, string id, ModifyAttachmentsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (courseId == null)
                    throw new ArgumentNullException(courseId);
                if (courseWorkId == null)
                    throw new ArgumentNullException(courseWorkId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.StudentSubmissions.ModifyAttachments(body, courseId, courseWorkId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request StudentSubmissions.ModifyAttachments failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}