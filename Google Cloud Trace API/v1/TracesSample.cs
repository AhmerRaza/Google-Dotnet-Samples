// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:33:10
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the CloudTrace v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Send and retrieve trace data from Google Cloud Trace. Data is generated and available by default for all App Engine applications. Data from other applications can be written to Cloud Trace for display, reporting, and analysis.
// API Documentation Link https://cloud.google.com/tools/cloud-trace
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/CloudTrace/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.CloudTrace.v1/ 
// Install Command: PM>  Install-Package Google.Apis.CloudTrace.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.CloudTrace.v1;
using Google.Apis.CloudTrace.v1.Data;
using System;

namespace GoogleSamplecSharpSample.CloudTracev1.Methods
{
  
    public static class TracesSample
    {

        public class TracesListOptionalParms
        {
            /// Type of data returned for traces in the list. Optional. Default is `MINIMAL`.
            public string View { get; set; }  
            /// Maximum number of traces to return. If not specified or <= 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. Optional.
            public int PageSize { get; set; }  
            /// Token identifying the page of results to return. If provided, use the value of the `next_page_token` field from a previous request. Optional.
            public string PageToken { get; set; }  
            /// End of the time interval (inclusive) during which the trace data was collected from the application.
            public string StartTime { get; set; }  
            /// Start of the time interval (inclusive) during which the trace data was collected from the application.
            public string EndTime { get; set; }  
            /// An optional filter for the request.
            public string Filter { get; set; }  
            /// Field used to sort the returned traces. Optional. Can be one of the following: * `trace_id` * `name` (`name` field of root span in the trace) * `duration` (difference between `end_time` and `start_time` fields of the root span) * `start` (`start_time` field of the root span) Descending order can be specified by appending `desc` to the sort field (for example, `name desc`). Only one sort field is permitted.
            public string OrderBy { get; set; }  
        
        }
 
        /// <summary>
        /// Returns of a list of traces that match the specified filter conditions. 
        /// Documentation https://developers.google.com/cloudtrace/v1/reference/traces/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudTrace service.</param>  
        /// <param name="projectId">ID of the Cloud project where the trace data is stored.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>ListTracesResponseResponse</returns>
        public static ListTracesResponse List(CloudTraceService service, string projectId, TracesListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Building the initial request.
                var request = service.Traces.List(projectId);

                // Applying optional parameters to the request.                
                request = (TracesResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Traces.List failed.", ex);
            }
        }


        /// <summary>
        /// Gets a single trace by its ID. 
        /// Documentation https://developers.google.com/cloudtrace/v1/reference/traces/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudTrace service.</param>  
        /// <param name="projectId">ID of the Cloud project where the trace data is stored.</param>
        /// <param name="traceId">ID of the trace to return.</param>
        /// <returns>TraceResponse</returns>
        public static Trace Get(CloudTraceService service, string projectId, string traceId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (traceId == null)
                    throw new ArgumentNullException(traceId);

                // Make the request.
                return service.Traces.Get(projectId, traceId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Traces.Get failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}