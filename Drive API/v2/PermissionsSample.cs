// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:32:46
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the drive v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
// API Documentation Link https://developers.google.com/drive/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/drive/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.drive.v2/ 
// Install Command: PM>  Install-Package Google.Apis.drive.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.drive.v2;
using Google.Apis.drive.v2.Data;
using System;

namespace GoogleSamplecSharpSample.drivev2.Methods
{
  
    public static class PermissionsSample
    {


        /// <summary>
        /// Deletes a permission from a file. 
        /// Documentation https://developers.google.com/drive/v2/reference/permissions/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated drive service.</param>  
        /// <param name="fileId">The ID for the file.</param>
        /// <param name="permissionId">The ID for the permission.</param>
        public static void Delete(driveService service, string fileId, string permissionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (permissionId == null)
                    throw new ArgumentNullException(permissionId);

                // Make the request.
                return service.Permissions.Delete(fileId, permissionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Permissions.Delete failed.", ex);
            }
        }


        /// <summary>
        /// Gets a permission by ID. 
        /// Documentation https://developers.google.com/drive/v2/reference/permissions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated drive service.</param>  
        /// <param name="fileId">The ID for the file.</param>
        /// <param name="permissionId">The ID for the permission.</param>
        /// <returns>PermissionResponse</returns>
        public static Permission Get(driveService service, string fileId, string permissionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (permissionId == null)
                    throw new ArgumentNullException(permissionId);

                // Make the request.
                return service.Permissions.Get(fileId, permissionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Permissions.Get failed.", ex);
            }
        }


        /// <summary>
        /// Returns the permission ID for an email address. 
        /// Documentation https://developers.google.com/drive/v2/reference/permissions/getIdForEmail
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated drive service.</param>  
        /// <param name="email">The email address for which to return a permission ID</param>
        /// <returns>PermissionIdResponse</returns>
        public static PermissionId GetIdForEmail(driveService service, string email)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (email == null)
                    throw new ArgumentNullException(email);

                // Make the request.
                return service.Permissions.GetIdForEmail(email).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Permissions.GetIdForEmail failed.", ex);
            }
        }

        public class PermissionsInsertOptionalParms
        {
            /// A custom message to include in notification emails.
            public string EmailMessage { get; set; }  
            /// Whether to send notification emails when sharing to users or groups. This parameter is ignored and an email is sent if the role is owner.
            public bool SendNotificationEmails { get; set; }  
        
        }
 
        /// <summary>
        /// Inserts a permission for a file. 
        /// Documentation https://developers.google.com/drive/v2/reference/permissions/insert
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated drive service.</param>  
        /// <param name="fileId">The ID for the file.</param>
        /// <param name="body">A valid drive v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>PermissionResponse</returns>
        public static Permission Insert(driveService service, string fileId, Permission body, PermissionsInsertOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);

                // Building the initial request.
                var request = service.Permissions.Insert(body, fileId);

                // Applying optional parameters to the request.                
                request = (PermissionsResource.InsertRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Permissions.Insert failed.", ex);
            }
        }


        /// <summary>
        /// Lists a file's permissions. 
        /// Documentation https://developers.google.com/drive/v2/reference/permissions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated drive service.</param>  
        /// <param name="fileId">The ID for the file.</param>
        /// <returns>PermissionListResponse</returns>
        public static PermissionList List(driveService service, string fileId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);

                // Make the request.
                return service.Permissions.List(fileId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Permissions.List failed.", ex);
            }
        }

        public class PermissionsPatchOptionalParms
        {
            /// Whether to remove the expiration date.
            public bool RemoveExpiration { get; set; }  
            /// Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
            public bool TransferOwnership { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a permission using patch semantics. 
        /// Documentation https://developers.google.com/drive/v2/reference/permissions/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated drive service.</param>  
        /// <param name="fileId">The ID for the file.</param>
        /// <param name="permissionId">The ID for the permission.</param>
        /// <param name="body">A valid drive v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>PermissionResponse</returns>
        public static Permission Patch(driveService service, string fileId, string permissionId, Permission body, PermissionsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (permissionId == null)
                    throw new ArgumentNullException(permissionId);

                // Building the initial request.
                var request = service.Permissions.Patch(body, fileId, permissionId);

                // Applying optional parameters to the request.                
                request = (PermissionsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Permissions.Patch failed.", ex);
            }
        }

        public class PermissionsUpdateOptionalParms
        {
            /// Whether to remove the expiration date.
            public bool RemoveExpiration { get; set; }  
            /// Whether changing a role to 'owner' downgrades the current owners to writers. Does nothing if the specified role is not 'owner'.
            public bool TransferOwnership { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a permission. 
        /// Documentation https://developers.google.com/drive/v2/reference/permissions/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated drive service.</param>  
        /// <param name="fileId">The ID for the file.</param>
        /// <param name="permissionId">The ID for the permission.</param>
        /// <param name="body">A valid drive v2 body.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>PermissionResponse</returns>
        public static Permission Update(driveService service, string fileId, string permissionId, Permission body, PermissionsUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (fileId == null)
                    throw new ArgumentNullException(fileId);
                if (permissionId == null)
                    throw new ArgumentNullException(permissionId);

                // Building the initial request.
                var request = service.Permissions.Update(body, fileId, permissionId);

                // Applying optional parameters to the request.                
                request = (PermissionsResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Permissions.Update failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}