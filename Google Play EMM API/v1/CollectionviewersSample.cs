// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:31:51
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the AndroidEnterprise v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages the deployment of apps to Android for Work users.
// API Documentation Link https://developers.google.com/android/work/play/emm-api
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/AndroidEnterprise/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.AndroidEnterprise.v1/ 
// Install Command: PM>  Install-Package Google.Apis.AndroidEnterprise.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.AndroidEnterprise.v1;
using Google.Apis.AndroidEnterprise.v1.Data;
using System;

namespace GoogleSamplecSharpSample.AndroidEnterprisev1.Methods
{
  
    public static class CollectionviewersSample
    {


        /// <summary>
        /// Removes the user from the list of those specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only such users will see the collection. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/collectionviewers/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated AndroidEnterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="collectionId">The ID of the collection.</param>
        /// <param name="userId">The ID of the user.</param>
        public static void Delete(AndroidEnterpriseService service, string enterpriseId, string collectionId, string userId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (collectionId == null)
                    throw new ArgumentNullException(collectionId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.Collectionviewers.Delete(enterpriseId, collectionId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Collectionviewers.Delete failed.", ex);
            }
        }


        /// <summary>
        /// Retrieves the ID of the user if they have been specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only these users will see the collection. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/collectionviewers/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated AndroidEnterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="collectionId">The ID of the collection.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>UserResponse</returns>
        public static User Get(AndroidEnterpriseService service, string enterpriseId, string collectionId, string userId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (collectionId == null)
                    throw new ArgumentNullException(collectionId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.Collectionviewers.Get(enterpriseId, collectionId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Collectionviewers.Get failed.", ex);
            }
        }


        /// <summary>
        /// Retrieves the IDs of the users who have been specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only these users will see the collection. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/collectionviewers/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated AndroidEnterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="collectionId">The ID of the collection.</param>
        /// <returns>CollectionViewersListResponseResponse</returns>
        public static CollectionViewersListResponse List(AndroidEnterpriseService service, string enterpriseId, string collectionId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (collectionId == null)
                    throw new ArgumentNullException(collectionId);

                // Make the request.
                return service.Collectionviewers.List(enterpriseId, collectionId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Collectionviewers.List failed.", ex);
            }
        }


        /// <summary>
        /// Adds the user to the list of those specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only such users will see the collection. This method supports patch semantics. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/collectionviewers/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated AndroidEnterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="collectionId">The ID of the collection.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">A valid AndroidEnterprise v1 body.</param>
        /// <returns>UserResponse</returns>
        public static User Patch(AndroidEnterpriseService service, string enterpriseId, string collectionId, string userId, User body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (collectionId == null)
                    throw new ArgumentNullException(collectionId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.Collectionviewers.Patch(body, enterpriseId, collectionId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Collectionviewers.Patch failed.", ex);
            }
        }


        /// <summary>
        /// Adds the user to the list of those specifically allowed to see the collection. If the collection's visibility is set to viewersOnly then only such users will see the collection. 
        /// Documentation https://developers.google.com/androidenterprise/v1/reference/collectionviewers/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated AndroidEnterprise service.</param>  
        /// <param name="enterpriseId">The ID of the enterprise.</param>
        /// <param name="collectionId">The ID of the collection.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="body">A valid AndroidEnterprise v1 body.</param>
        /// <returns>UserResponse</returns>
        public static User Update(AndroidEnterpriseService service, string enterpriseId, string collectionId, string userId, User body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (enterpriseId == null)
                    throw new ArgumentNullException(enterpriseId);
                if (collectionId == null)
                    throw new ArgumentNullException(collectionId);
                if (userId == null)
                    throw new ArgumentNullException(userId);

                // Make the request.
                return service.Collectionviewers.Update(body, enterpriseId, collectionId, userId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Collectionviewers.Update failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}