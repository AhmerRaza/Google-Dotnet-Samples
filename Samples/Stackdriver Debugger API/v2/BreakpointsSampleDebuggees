// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 2017-09-22
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Clouddebugger v2 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Examines the call stack and variables of a running application without stopping or slowing it down.
// API Documentation Link http://cloud.google.com/debugger
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Clouddebugger/v2/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Clouddebugger.v2/ 
// Install Command: PM>  Install-Package Google.Apis.Clouddebugger.v2
//
//------------------------------------------------------------------------------  
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Clouddebugger.v2.Data;
using System;

namespace GoogleSamplecSharpSample.Clouddebuggerv2.Methods
{
  
    public static class BreakpointsSample
    {


        /// <summary>
        /// Updates the breakpoint state or mutable fields.The entire Breakpoint message must be sent back to the controller service.Updates to active breakpoint fields are only allowed if the new valuedoes not change the breakpoint specification. Updates to the `location`,`condition` and `expressions` fields should not alter the breakpointsemantics. These may only make changes such as canonicalizing a valueor snapping the location to the correct line of code. 
        /// Documentation https://developers.google.com/clouddebugger/v2/reference/breakpoints/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Clouddebugger service.</param>  
        /// <param name="debuggeeId">Identifies the debuggee being debugged.</param>
        /// <param name="id">Breakpoint identifier, unique in the scope of the debuggee.</param>
        /// <param name="body">A valid Clouddebugger v2 body.</param>
        /// <returns>UpdateActiveBreakpointResponseResponse</returns>
        public static UpdateActiveBreakpointResponse Update(ClouddebuggerService service, string debuggeeId, string id, UpdateActiveBreakpointRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (debuggeeId == null)
                    throw new ArgumentNullException(debuggeeId);
                if (id == null)
                    throw new ArgumentNullException(id);

                // Make the request.
                return service.Breakpoints.Update(body, debuggeeId, id).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Breakpoints.Update failed.", ex);
            }
        }
        public class BreakpointsListOptionalParms
        {
            /// If set to `true` (recommended), returns `google.rpc.Code.OK` status andsets the `wait_expired` response field to `true` when the server-selectedtimeout has expired.If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` statuswhen the server-selected timeout has expired.
            public bool? SuccessOnTimeout { get; set; }  
            /// A token that, if specified, blocks the method call until the listof active breakpoints has changed, or a server-selected timeout hasexpired. The value should be set from the `next_wait_token` field inthe last response. The initial value should be set to `"init"`.
            public string WaitToken { get; set; }  
        
        }
 
        /// <summary>
        /// Returns the list of all active breakpoints for the debuggee.The breakpoint specification (`location`, `condition`, and `expressions`fields) is semantically immutable, although the field values maychange. For example, an agent may update the location line numberto reflect the actual line where the breakpoint was set, but thisdoesn't change the breakpoint semantics.This means that an agent does not need to check if a breakpoint has changedwhen it encounters the same breakpoint on a successive call.Moreover, an agent should remember the breakpoints that are completeduntil the controller removes them from the active list to avoidsetting those breakpoints again. 
        /// Documentation https://developers.google.com/clouddebugger/v2/reference/breakpoints/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Clouddebugger service.</param>  
        /// <param name="debuggeeId">Identifies the debuggee.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListActiveBreakpointsResponseResponse</returns>
        public static ListActiveBreakpointsResponse List(ClouddebuggerService service, string debuggeeId, BreakpointsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (debuggeeId == null)
                    throw new ArgumentNullException(debuggeeId);

                // Building the initial request.
                var request = service.Breakpoints.List(debuggeeId);

                // Applying optional parameters to the request.                
                request = (BreakpointsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Breakpoints.List failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}