// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:32:09
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the CloudResourceManager v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: The Google Cloud Resource Manager API provides methods for creating, reading, and updating project metadata.
// API Documentation Link https://cloud.google.com/resource-manager
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/CloudResourceManager/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.CloudResourceManager.v1/ 
// Install Command: PM>  Install-Package Google.Apis.CloudResourceManager.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.CloudResourceManager.v1;
using Google.Apis.CloudResourceManager.v1.Data;
using System;

namespace GoogleSamplecSharpSample.CloudResourceManagerv1.Methods
{
  
    public static class ProjectsSample
    {


        /// <summary>
        /// Gets a list of ancestors in the resource hierarchy for the Project
identified by the specified `project_id` (for example, `my-project-123`).

The caller must have read permissions for this Project. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/getAncestry
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="projectId">The Project ID (for example, `my-project-123`).

Required.</param>
        /// <param name="body">A valid CloudResourceManager v1 body.</param>
        /// <returns>GetAncestryResponseResponse</returns>
        public static GetAncestryResponse GetAncestry(CloudResourceManagerService service, string projectId, GetAncestryRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Projects.GetAncestry(body, projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.GetAncestry failed.", ex);
            }
        }


        /// <summary>
        /// Returns the IAM access control policy for the specified Project.
Permission is denied if the policy or the resource does not exist. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/getIamPolicy
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="resource">REQUIRED: The resource for which the policy is being requested.
`resource` is usually specified as a path. For example, a Project
resource is specified as `projects/{project}`.</param>
        /// <param name="body">A valid CloudResourceManager v1 body.</param>
        /// <returns>PolicyResponse</returns>
        public static Policy GetIamPolicy(CloudResourceManagerService service, string resource, GetIamPolicyRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Projects.GetIamPolicy(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.GetIamPolicy failed.", ex);
            }
        }


        /// <summary>
        /// Restores the Project identified by the specified
`project_id` (for example, `my-project-123`).
You can only use this method for a Project that has a lifecycle state of
DELETE_REQUESTED.
After deletion starts, the Project cannot be restored.

The caller must have modify permissions for this Project. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/undelete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="projectId">The project ID (for example, `foo-bar-123`).

Required.</param>
        /// <param name="body">A valid CloudResourceManager v1 body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Undelete(CloudResourceManagerService service, string projectId, UndeleteProjectRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Projects.Undelete(body, projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.Undelete failed.", ex);
            }
        }

        public class ProjectsListOptionalParms
        {
            /// The maximum number of Projects to return in the response.
The server can return fewer Projects than requested.
If unspecified, server picks an appropriate default.

Optional.
            public int PageSize { get; set; }  
            /// An expression for filtering the results of the request.  Filter rules are
case insensitive. The fields eligible for filtering are:

+ `name`
+ `id`
+ <code>labels.<em>key</em></code> where *key* is the name of a label

Some examples of using labels as filters:

|Filter|Description|
|------|-----------|
|name:*|The project has a name.|
|name:Howl|The project's name is `Howl` or `howl`.|
|name:HOWL|Equivalent to above.|
|NAME:howl|Equivalent to above.|
|labels.color:*|The project has the label `color`.|
|labels.color:red|The project's label `color` has the value `red`.|
|labels.color:red&nbsp;label.size:big|The project's label `color` has the
value `red` and its label `size` has the value `big`.

Optional.
            public string Filter { get; set; }  
            /// A pagination token returned from a previous call to ListProjects
that indicates from where listing should continue.

Optional.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists Projects that are visible to the user and satisfy the
specified filter. This method returns Projects in an unspecified order.
New Projects do not necessarily appear at the end of the list. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="optional">Optional paramaters.</param>        /// <returns>ListProjectsResponseResponse</returns>
        public static ListProjectsResponse List(CloudResourceManagerService service, ProjectsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Projects.List();

                // Applying optional parameters to the request.                
                request = (ProjectsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.List failed.", ex);
            }
        }


        /// <summary>
        /// Retrieves the Project identified by the specified
`project_id` (for example, `my-project-123`).

The caller must have read permissions for this Project. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="projectId">The Project ID (for example, `my-project-123`).

Required.</param>
        /// <returns>ProjectResponse</returns>
        public static Project Get(CloudResourceManagerService service, string projectId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Projects.Get(projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.Get failed.", ex);
            }
        }


        /// <summary>
        /// Updates the attributes of the Project identified by the specified
`project_id` (for example, `my-project-123`).

The caller must have modify permissions for this Project. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="projectId">The project ID (for example, `my-project-123`).

Required.</param>
        /// <param name="body">A valid CloudResourceManager v1 body.</param>
        /// <returns>ProjectResponse</returns>
        public static Project Update(CloudResourceManagerService service, string projectId, Project body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Projects.Update(body, projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.Update failed.", ex);
            }
        }


        /// <summary>
        /// Request that a new Project be created. The result is an Operation which
can be used to track the creation process. It is automatically deleted
after a few hours, so there is no need to call DeleteOperation.

Our SLO permits Project creation to take up to 30 seconds at the 90th
percentile. As of 2016-08-29, we are observing 6 seconds 50th percentile
latency. 95th percentile latency is around 11 seconds. We recommend
polling at the 5th second with an exponential backoff. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="body">A valid CloudResourceManager v1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Create(CloudResourceManagerService service, Project body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Projects.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.Create failed.", ex);
            }
        }


        /// <summary>
        /// Sets the IAM access control policy for the specified Project. Replaces
any existing policy.

The following constraints apply when using `setIamPolicy()`:

+ Project does not support `allUsers` and `allAuthenticatedUsers` as
`members` in a `Binding` of a `Policy`.

+ The owner role can be granted only to `user` and `serviceAccount`.

+ Service accounts can be made owners of a project directly
without any restrictions. However, to be added as an owner, a user must be
invited via Cloud Platform console and must accept the invitation.

+ A user cannot be granted the owner role using `setIamPolicy()`. The user
must be granted the owner role using the Cloud Platform Console and must
explicitly accept the invitation.

+ Invitations to grant the owner role cannot be sent using
`setIamPolicy()`;
they must be sent only using the Cloud Platform Console.

+ Membership changes that leave the project without any owners that have
accepted the Terms of Service (ToS) will be rejected.

+ There must be at least one owner who has accepted the Terms of
Service (ToS) agreement in the policy. Calling `setIamPolicy()` to
to remove the last ToS-accepted owner from the policy will fail. This
restriction also applies to legacy projects that no longer have owners
who have accepted the ToS. Edits to IAM policies will be rejected until
the lack of a ToS-accepting owner is rectified.

+ Calling this method requires enabling the App Engine Admin API.

Note: Removing service accounts from policies or changing their roles
can render services completely inoperable. It is important to understand
how the service account is being used before removing or updating its
roles. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/setIamPolicy
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="resource">REQUIRED: The resource for which the policy is being specified.
`resource` is usually specified as a path. For example, a Project
resource is specified as `projects/{project}`.</param>
        /// <param name="body">A valid CloudResourceManager v1 body.</param>
        /// <returns>PolicyResponse</returns>
        public static Policy SetIamPolicy(CloudResourceManagerService service, string resource, SetIamPolicyRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Projects.SetIamPolicy(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.SetIamPolicy failed.", ex);
            }
        }


        /// <summary>
        /// Marks the Project identified by the specified
`project_id` (for example, `my-project-123`) for deletion.
This method will only affect the Project if the following criteria are met:

+ The Project does not have a billing account associated with it.
+ The Project has a lifecycle state of
ACTIVE.

This method changes the Project's lifecycle state from
ACTIVE
to DELETE_REQUESTED.
The deletion starts at an unspecified time,
at which point the Project is no longer accessible.

Until the deletion completes, you can check the lifecycle state
checked by retrieving the Project with GetProject,
and the Project remains visible to ListProjects.
However, you cannot update the project.

After the deletion completes, the Project is not retrievable by
the  GetProject and
ListProjects methods.

The caller must have modify permissions for this Project. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="projectId">The Project ID (for example, `foo-bar-123`).

Required.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(CloudResourceManagerService service, string projectId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Projects.Delete(projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.Delete failed.", ex);
            }
        }


        /// <summary>
        /// Returns permissions that a caller has on the specified Project. 
        /// Documentation https://developers.google.com/cloudresourcemanager/v1/reference/projects/testIamPermissions
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated CloudResourceManager service.</param>  
        /// <param name="resource">REQUIRED: The resource for which the policy detail is being requested.
`resource` is usually specified as a path. For example, a Project
resource is specified as `projects/{project}`.</param>
        /// <param name="body">A valid CloudResourceManager v1 body.</param>
        /// <returns>TestIamPermissionsResponseResponse</returns>
        public static TestIamPermissionsResponse TestIamPermissions(CloudResourceManagerService service, string resource, TestIamPermissionsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (resource == null)
                    throw new ArgumentNullException(resource);

                // Make the request.
                return service.Projects.TestIamPermissions(body, resource).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Projects.TestIamPermissions failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}