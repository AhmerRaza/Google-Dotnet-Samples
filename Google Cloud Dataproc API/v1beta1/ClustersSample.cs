// Copyright 2017 DAIMTO ([Linda Lawton](https://twitter.com/LindaLawtonDK)) :  [www.daimto.com](http://www.daimto.com/)
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  methodTemplate.tt
//     Build date: 07/06/2017 15:31:18
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------  
// About 
// 
// Unoffical sample for the Dataproc v1beta1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Manages Hadoop-based clusters and jobs on Google Cloud Platform.
// API Documentation Link https://cloud.google.com/dataproc/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Dataproc/v1beta1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library (https://github.com/google/google-api-dotnet-client)
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Dataproc.v1beta1/ 
// Install Command: PM>  Install-Package Google.Apis.Dataproc.v1beta1
//
//------------------------------------------------------------------------------  
using Google.Apis.Dataproc.v1beta1;
using Google.Apis.Dataproc.v1beta1.Data;
using System;

namespace GoogleSamplecSharpSample.Dataprocv1beta1.Methods
{
  
    public static class ClustersSample
    {

        public class ClustersPatchOptionalParms
        {
            /// Required Specifies the path, relative to <code>Cluster</code>, of the field to update. For example, to change the number of workers in a cluster to 5, the <code>update_mask</code> parameter would be specified as <code>configuration.worker_configuration.num_instances</code>, and the PATCH request body would specify the new value, as follows:{  "configuration":{    "workerConfiguration":{      "numInstances":"5"    }  }}Similarly, to change the number of preemptible workers in a cluster to 5, the <code>update_mask</code> parameter would be <code>config.secondary_worker_config.num_instances</code>, and the PATCH request body would be set as follows:{  "config":{    "secondaryWorkerConfig":{      "numInstances":"5"    }  }}<strong>Note:</strong> Currently, <code>config.worker_config.num_instances</code> and <code>config.secondary_worker_config.num_instances</code> are the only fields that can be updated.
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1beta1/reference/clusters/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required The ID of the Google Cloud Platform project the cluster belongs to.</param>
        /// <param name="clusterName">Required The cluster name.</param>
        /// <param name="body">A valid Dataproc v1beta1 body.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Patch(DataprocService service, string projectId, string clusterName, Cluster body, ClustersPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Building the initial request.
                var request = service.Clusters.Patch(body, projectId, clusterName);

                // Applying optional parameters to the request.                
                request = (ClustersResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Patch failed.", ex);
            }
        }

        /// <summary>
        /// Gets the resource representation for a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1beta1/reference/clusters/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="clusterName">Required The cluster name.</param>
        /// <returns>ClusterResponse</returns>
        public static Cluster Get(DataprocService service, string projectId, string clusterName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Make the request.
                return service.Clusters.Get(projectId, clusterName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Get failed.", ex);
            }
        }

        /// <summary>
        /// Gets cluster diagnostic information. After the operation completes, the Operation.response field contains DiagnoseClusterOutputLocation. 
        /// Documentation https://developers.google.com/dataproc/v1beta1/reference/clusters/diagnose
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="clusterName">Required The cluster name.</param>
        /// <param name="body">A valid Dataproc v1beta1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Diagnose(DataprocService service, string projectId, string clusterName, DiagnoseClusterRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Make the request.
                return service.Clusters.Diagnose(body, projectId, clusterName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Diagnose failed.", ex);
            }
        }

        /// <summary>
        /// Deletes a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1beta1/reference/clusters/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="clusterName">Required The cluster name.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Delete(DataprocService service, string projectId, string clusterName)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);
                if (clusterName == null)
                    throw new ArgumentNullException(clusterName);

                // Make the request.
                return service.Clusters.Delete(projectId, clusterName).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Delete failed.", ex);
            }
        }
        public class ClustersListOptionalParms
        {
            /// The standard List page token.
            public string PageToken { get; set; }  
            /// The standard List page size.
            public int? PageSize { get; set; }  
            /// Optional A filter constraining which clusters to list. Valid filters contain label terms such as: labels.key1 = val1 AND (-labels.k2 = val2 OR labels.k3 = val3)
            public string Filter { get; set; }  
        
        }
 
        /// <summary>
        /// Lists all clusters in a project. 
        /// Documentation https://developers.google.com/dataproc/v1beta1/reference/clusters/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="optional">Optional paramaters.</param>
        /// <returns>ListClustersResponseResponse</returns>
        public static ListClustersResponse List(DataprocService service, string projectId, ClustersListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Building the initial request.
                var request = service.Clusters.List(projectId);

                // Applying optional parameters to the request.                
                request = (ClustersResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.List failed.", ex);
            }
        }

        /// <summary>
        /// Creates a cluster in a project. 
        /// Documentation https://developers.google.com/dataproc/v1beta1/reference/clusters/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Dataproc service.</param>  
        /// <param name="projectId">Required The ID of the Google Cloud Platform project that the cluster belongs to.</param>
        /// <param name="body">A valid Dataproc v1beta1 body.</param>
        /// <returns>OperationResponse</returns>
        public static Operation Create(DataprocService service, string projectId, Cluster body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (projectId == null)
                    throw new ArgumentNullException(projectId);

                // Make the request.
                return service.Clusters.Create(body, projectId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Clusters.Create failed.", ex);
            }
        }
        
        }

        public static class SampleHelpers
        {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}