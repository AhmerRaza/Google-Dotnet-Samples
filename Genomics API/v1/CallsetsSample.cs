// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:33:19
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the genomics v1 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Stores, processes, explores and shares genomic data.
// API Documentation Link https://cloud.google.com/genomics/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/genomics/v1/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.genomics.v1/ 
// Install Command: PM>  Install-Package Google.Apis.genomics.v1
//
//------------------------------------------------------------------------------  
using Google.Apis.genomics.v1;
using Google.Apis.genomics.v1.Data;
using System;

namespace GoogleSamplecSharpSample.genomicsv1.Methods
{
  
    public static class CallsetsSample
    {


        /// <summary>
        /// Gets a list of call sets matching the criteria. For the definitions of call sets and other genomics resources, see [Fundamentals of Google Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) Implements [GlobalAllianceApi.searchCallSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/variantmethods.avdl#L178). 
        /// Documentation https://developers.google.com/genomics/v1/reference/callsets/search
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated genomics service.</param>  
        /// <param name="body">A valid genomics v1 body.</param>
        /// <returns>SearchCallSetsResponseResponse</returns>
        public static SearchCallSetsResponse Search(genomicsService service, SearchCallSetsRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Callsets.Search(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Callsets.Search failed.", ex);
            }
        }


        /// <summary>
        /// Creates a new call set. For the definitions of call sets and other genomics resources, see [Fundamentals of Google Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/callsets/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated genomics service.</param>  
        /// <param name="body">A valid genomics v1 body.</param>
        /// <returns>CallSetResponse</returns>
        public static CallSet Create(genomicsService service, CallSet body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Callsets.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Callsets.Create failed.", ex);
            }
        }

        public class CallsetsPatchOptionalParms
        {
            /// An optional mask specifying which fields to update. At this time, the only mutable field is name. The only acceptable value is "name". If unspecified, all mutable fields will be updated.
            public string UpdateMask { get; set; }  
        
        }
 
        /// <summary>
        /// Updates a call set. For the definitions of call sets and other genomics resources, see [Fundamentals of Google Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) This method supports patch semantics. 
        /// Documentation https://developers.google.com/genomics/v1/reference/callsets/patch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated genomics service.</param>  
        /// <param name="callSetId">The ID of the call set to be updated.</param>
        /// <param name="body">A valid genomics v1 body.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>CallSetResponse</returns>
        public static CallSet Patch(genomicsService service, string callSetId, CallSet body, CallsetsPatchOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (callSetId == null)
                    throw new ArgumentNullException(callSetId);

                // Building the initial request.
                var request = service.Callsets.Patch(body, callSetId);

                // Applying optional parameters to the request.                
                request = (CallsetsResource.PatchRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Callsets.Patch failed.", ex);
            }
        }


        /// <summary>
        /// Deletes a call set. For the definitions of call sets and other genomics resources, see [Fundamentals of Google Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/callsets/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated genomics service.</param>  
        /// <param name="callSetId">The ID of the call set to be deleted.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(genomicsService service, string callSetId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (callSetId == null)
                    throw new ArgumentNullException(callSetId);

                // Make the request.
                return service.Callsets.Delete(callSetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Callsets.Delete failed.", ex);
            }
        }


        /// <summary>
        /// Gets a call set by ID. For the definitions of call sets and other genomics resources, see [Fundamentals of Google Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics) 
        /// Documentation https://developers.google.com/genomics/v1/reference/callsets/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated genomics service.</param>  
        /// <param name="callSetId">The ID of the call set.</param>
        /// <returns>CallSetResponse</returns>
        public static CallSet Get(genomicsService service, string callSetId)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (callSetId == null)
                    throw new ArgumentNullException(callSetId);

                // Make the request.
                return service.Callsets.Get(callSetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Callsets.Get failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}