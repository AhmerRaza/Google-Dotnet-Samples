// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:34:06
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the pubsub v1beta1a API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Provides reliable, many-to-many, asynchronous messaging between applications.

// API Documentation Link https://cloud.google.com/pubsub/docs
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/pubsub/v1beta1a/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.pubsub.v1beta1a/ 
// Install Command: PM>  Install-Package Google.Apis.pubsub.v1beta1a
//
//------------------------------------------------------------------------------  
using Google.Apis.pubsub.v1beta1a;
using Google.Apis.pubsub.v1beta1a.Data;
using System;

namespace GoogleSamplecSharpSample.pubsubv1beta1a.Methods
{
  
    public static class SubscriptionsSample
    {


        /// <summary>
        /// Modifies the <code>PushConfig</code> for a specified subscription.
This method can be used to suspend the flow of messages to an endpoint
by clearing the <code>PushConfig</code> field in the request. Messages
will be accumulated for delivery even if no push configuration is
defined or while the configuration is modified. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/modifyPushConfig
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="body">A valid pubsub v1beta1a body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty ModifyPushConfig(pubsubService service, ModifyPushConfigRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Subscriptions.ModifyPushConfig(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.ModifyPushConfig failed.", ex);
            }
        }


        /// <summary>
        /// Pulls a single message from the server.
If return_immediately is true, and no messages are available in the
subscription, this method returns FAILED_PRECONDITION. The system is free
to return an UNAVAILABLE error if no messages are available in a
reasonable amount of time (to reduce system load). 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/pull
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="body">A valid pubsub v1beta1a body.</param>
        /// <returns>PullResponseResponse</returns>
        public static PullResponse Pull(pubsubService service, PullRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Subscriptions.Pull(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Pull failed.", ex);
            }
        }

        public class SubscriptionsListOptionalParms
        {
            /// A valid label query expression.
            public string Query { get; set; }  
            /// Maximum number of subscriptions to return.
            public int MaxResults { get; set; }  
            /// The value obtained in the last <code>ListSubscriptionsResponse</code>
for continuation.
            public string PageToken { get; set; }  
        
        }
 
        /// <summary>
        /// Lists matching subscriptions. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/list
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="optional">Optional paramaters.</param>        /// <returns>ListSubscriptionsResponseResponse</returns>
        public static ListSubscriptionsResponse List(pubsubService service, SubscriptionsListOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");

                // Building the initial request.
                var request = service.Subscriptions.List();

                // Applying optional parameters to the request.                
                request = (SubscriptionsResource.ListRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.List failed.", ex);
            }
        }


        /// <summary>
        /// Gets the configuration details of a subscription. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="subscription">The name of the subscription to get.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Get(pubsubService service, string subscription)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.Get(subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Get failed.", ex);
            }
        }


        /// <summary>
        /// Pulls messages from the server. Returns an empty list if there are no
messages available in the backlog. The system is free to return UNAVAILABLE
if there are too many pull requests outstanding for the given subscription. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/pullBatch
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="body">A valid pubsub v1beta1a body.</param>
        /// <returns>PullBatchResponseResponse</returns>
        public static PullBatchResponse PullBatch(pubsubService service, PullBatchRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Subscriptions.PullBatch(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.PullBatch failed.", ex);
            }
        }


        /// <summary>
        /// Creates a subscription on a given topic for a given subscriber.
If the subscription already exists, returns ALREADY_EXISTS.
If the corresponding topic doesn't exist, returns NOT_FOUND.

If the name is not provided in the request, the server will assign a random
name for this subscription on the same project as the topic. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/create
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="body">A valid pubsub v1beta1a body.</param>
        /// <returns>SubscriptionResponse</returns>
        public static Subscription Create(pubsubService service, Subscription body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Subscriptions.Create(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Create failed.", ex);
            }
        }


        /// <summary>
        /// Modifies the Ack deadline for a message received from a pull request. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/modifyAckDeadline
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="body">A valid pubsub v1beta1a body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty ModifyAckDeadline(pubsubService service, ModifyAckDeadlineRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Subscriptions.ModifyAckDeadline(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.ModifyAckDeadline failed.", ex);
            }
        }


        /// <summary>
        /// Deletes an existing subscription. All pending messages in the subscription
are immediately dropped. Calls to Pull after deletion will return
NOT_FOUND. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/delete
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="subscription">The subscription to delete.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Delete(pubsubService service, string subscription)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (subscription == null)
                    throw new ArgumentNullException(subscription);

                // Make the request.
                return service.Subscriptions.Delete(subscription).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Delete failed.", ex);
            }
        }


        /// <summary>
        /// Acknowledges a particular received message: the Pub/Sub system can remove
the given message from the subscription. Acknowledging a message whose
Ack deadline has expired may succeed, but the message could have been
already redelivered. Acknowledging a message more than once will not
result in an error. This is only used for messages received via pull. 
        /// Documentation https://developers.google.com/pubsub/v1beta1a/reference/subscriptions/acknowledge
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated pubsub service.</param>  
        /// <param name="body">A valid pubsub v1beta1a body.</param>
        /// <returns>EmptyResponse</returns>
        public static Empty Acknowledge(pubsubService service, AcknowledgeRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");

                // Make the request.
                return service.Subscriptions.Acknowledge(body).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Subscriptions.Acknowledge failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}