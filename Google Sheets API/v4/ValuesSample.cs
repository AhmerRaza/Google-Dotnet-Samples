// Copyright 2017 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Template File Name:  Methodtemplate.tt
//     Build date: 01/02/2017 22:34:26
//     C# generater version: 1.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
  
// About 
// 
// Unoffical sample for the Sheets v4 API for C#. 
// This sample is designed to be used with the Google .Net client library. (https://github.com/google/google-api-dotnet-client)
// 
// API Description: Reads and writes Google Sheets.
// API Documentation Link https://developers.google.com/sheets/
//
// Discovery Doc  https://www.googleapis.com/discovery/v1/apis/Sheets/v4/rest
//
//------------------------------------------------------------------------------
// Installation
//
// This sample code uses the Google .Net client library 
//
// NuGet package:
//
// Location: https://www.nuget.org/packages/Google.Apis.Sheets.v4/ 
// Install Command: PM>  Install-Package Google.Apis.Sheets.v4
//
//------------------------------------------------------------------------------  
using Google.Apis.Sheets.v4;
using Google.Apis.Sheets.v4.Data;
using System;

namespace GoogleSamplecSharpSample.Sheetsv4.Methods
{
  
    public static class ValuesSample
    {


        /// <summary>
        /// Clears values from a spreadsheet.
The caller must specify the spreadsheet ID and range.
Only values are cleared -- all other properties of the cell (such as
formatting, data validation, etc..) are kept. 
        /// Documentation https://developers.google.com/sheets/v4/reference/values/clear
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Sheets service.</param>  
        /// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
        /// <param name="range">The A1 notation of the values to clear.</param>
        /// <param name="body">A valid Sheets v4 body.</param>
        /// <returns>ClearValuesResponseResponse</returns>
        public static ClearValuesResponse Clear(SheetsService service, string spreadsheetId, string range, ClearValuesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (spreadsheetId == null)
                    throw new ArgumentNullException(spreadsheetId);
                if (range == null)
                    throw new ArgumentNullException(range);

                // Make the request.
                return service.Values.Clear(body, spreadsheetId, range).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Values.Clear failed.", ex);
            }
        }

        public class ValuesBatchGetOptionalParms
        {
            /// The A1 notation of the values to retrieve.
            public string Ranges { get; set; }  
            /// How values should be represented in the output.
The default render option is ValueRenderOption.FORMATTED_VALUE.
            public string ValueRenderOption { get; set; }  
            /// How dates, times, and durations should be represented in the output.
This is ignored if value_render_option is
FORMATTED_VALUE.
The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
            public string DateTimeRenderOption { get; set; }  
            /// The major dimension that results should use.

For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
then requesting `range=A1:B2,majorDimension=ROWS` will return
`[[1,2],[3,4]]`,
whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
`[[1,3],[2,4]]`.
            public string MajorDimension { get; set; }  
        
        }
 
        /// <summary>
        /// Returns one or more ranges of values from a spreadsheet.
The caller must specify the spreadsheet ID and one or more ranges. 
        /// Documentation https://developers.google.com/sheets/v4/reference/values/batchGet
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Sheets service.</param>  
        /// <param name="spreadsheetId">The ID of the spreadsheet to retrieve data from.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>BatchGetValuesResponseResponse</returns>
        public static BatchGetValuesResponse BatchGet(SheetsService service, string spreadsheetId, ValuesBatchGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (spreadsheetId == null)
                    throw new ArgumentNullException(spreadsheetId);

                // Building the initial request.
                var request = service.Values.BatchGet(spreadsheetId);

                // Applying optional parameters to the request.                
                request = (ValuesResource.BatchGetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Values.BatchGet failed.", ex);
            }
        }


        /// <summary>
        /// Sets values in one or more ranges of a spreadsheet.
The caller must specify the spreadsheet ID,
a valueInputOption, and one or more
ValueRanges. 
        /// Documentation https://developers.google.com/sheets/v4/reference/values/batchUpdate
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Sheets service.</param>  
        /// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
        /// <param name="body">A valid Sheets v4 body.</param>
        /// <returns>BatchUpdateValuesResponseResponse</returns>
        public static BatchUpdateValuesResponse BatchUpdate(SheetsService service, string spreadsheetId, BatchUpdateValuesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (spreadsheetId == null)
                    throw new ArgumentNullException(spreadsheetId);

                // Make the request.
                return service.Values.BatchUpdate(body, spreadsheetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Values.BatchUpdate failed.", ex);
            }
        }

        public class ValuesGetOptionalParms
        {
            /// How values should be represented in the output.
The default render option is ValueRenderOption.FORMATTED_VALUE.
            public string ValueRenderOption { get; set; }  
            /// How dates, times, and durations should be represented in the output.
This is ignored if value_render_option is
FORMATTED_VALUE.
The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
            public string DateTimeRenderOption { get; set; }  
            /// The major dimension that results should use.

For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
then requesting `range=A1:B2,majorDimension=ROWS` will return
`[[1,2],[3,4]]`,
whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
`[[1,3],[2,4]]`.
            public string MajorDimension { get; set; }  
        
        }
 
        /// <summary>
        /// Returns a range of values from a spreadsheet.
The caller must specify the spreadsheet ID and a range. 
        /// Documentation https://developers.google.com/sheets/v4/reference/values/get
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Sheets service.</param>  
        /// <param name="spreadsheetId">The ID of the spreadsheet to retrieve data from.</param>
        /// <param name="range">The A1 notation of the values to retrieve.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>ValueRangeResponse</returns>
        public static ValueRange Get(SheetsService service, string spreadsheetId, string range, ValuesGetOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (spreadsheetId == null)
                    throw new ArgumentNullException(spreadsheetId);
                if (range == null)
                    throw new ArgumentNullException(range);

                // Building the initial request.
                var request = service.Values.Get(spreadsheetId, range);

                // Applying optional parameters to the request.                
                request = (ValuesResource.GetRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Values.Get failed.", ex);
            }
        }

        public class ValuesAppendOptionalParms
        {
            /// Determines how values in the response should be rendered.
The default render option is ValueRenderOption.FORMATTED_VALUE.
            public string ResponseValueRenderOption { get; set; }  
            /// How the input data should be interpreted.
            public string ValueInputOption { get; set; }  
            /// Determines how dates, times, and durations in the response should be
rendered. This is ignored if response_value_render_option is
FORMATTED_VALUE.
The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
            public string ResponseDateTimeRenderOption { get; set; }  
            /// Determines if the update response should include the values
of the cells that were appended. By default, responses
do not include the updated values.
            public bool IncludeValuesInResponse { get; set; }  
            /// How the input data should be inserted.
            public string InsertDataOption { get; set; }  
        
        }
 
        /// <summary>
        /// Appends values to a spreadsheet. The input range is used to search for
existing data and find a "table" within that range. Values will be
appended to the next row of the table, starting with the first column of
the table. See the
[guide](/sheets/guides/values#appending_values)
and
[sample code](/sheets/samples/writing#append_values)
for specific details of how tables are detected and data is appended.

The caller must specify the spreadsheet ID, range, and
a valueInputOption.  The `valueInputOption` only
controls how the input data will be added to the sheet (column-wise or
row-wise), it does not influence what cell the data starts being written
to. 
        /// Documentation https://developers.google.com/sheets/v4/reference/values/append
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Sheets service.</param>  
        /// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
        /// <param name="range">The A1 notation of a range to search for a logical table of data.
Values will be appended after the last row of the table.</param>
        /// <param name="body">A valid Sheets v4 body.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>AppendValuesResponseResponse</returns>
        public static AppendValuesResponse Append(SheetsService service, string spreadsheetId, string range, ValueRange body, ValuesAppendOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (spreadsheetId == null)
                    throw new ArgumentNullException(spreadsheetId);
                if (range == null)
                    throw new ArgumentNullException(range);

                // Building the initial request.
                var request = service.Values.Append(body, spreadsheetId, range);

                // Applying optional parameters to the request.                
                request = (ValuesResource.AppendRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Values.Append failed.", ex);
            }
        }

        public class ValuesUpdateOptionalParms
        {
            /// Determines how values in the response should be rendered.
The default render option is ValueRenderOption.FORMATTED_VALUE.
            public string ResponseValueRenderOption { get; set; }  
            /// How the input data should be interpreted.
            public string ValueInputOption { get; set; }  
            /// Determines how dates, times, and durations in the response should be
rendered. This is ignored if response_value_render_option is
FORMATTED_VALUE.
The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
            public string ResponseDateTimeRenderOption { get; set; }  
            /// Determines if the update response should include the values
of the cells that were updated. By default, responses
do not include the updated values.
If the range to write was larger than than the range actually written,
the response will include all values in the requested range (excluding
trailing empty rows and columns).
            public bool IncludeValuesInResponse { get; set; }  
        
        }
 
        /// <summary>
        /// Sets values in a range of a spreadsheet.
The caller must specify the spreadsheet ID, range, and
a valueInputOption. 
        /// Documentation https://developers.google.com/sheets/v4/reference/values/update
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Sheets service.</param>  
        /// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
        /// <param name="range">The A1 notation of the values to update.</param>
        /// <param name="body">A valid Sheets v4 body.</param>
        /// <param name="optional">Optional paramaters.</param>        /// <returns>UpdateValuesResponseResponse</returns>
        public static UpdateValuesResponse Update(SheetsService service, string spreadsheetId, string range, ValueRange body, ValuesUpdateOptionalParms optional = null)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (spreadsheetId == null)
                    throw new ArgumentNullException(spreadsheetId);
                if (range == null)
                    throw new ArgumentNullException(range);

                // Building the initial request.
                var request = service.Values.Update(body, spreadsheetId, range);

                // Applying optional parameters to the request.                
                request = (ValuesResource.UpdateRequest)SampleHelpers.ApplyOptionalParms(request, optional);

                // Requesting data.
                return request.Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Values.Update failed.", ex);
            }
        }


        /// <summary>
        /// Clears one or more ranges of values from a spreadsheet.
The caller must specify the spreadsheet ID and one or more ranges.
Only values are cleared -- all other properties of the cell (such as
formatting, data validation, etc..) are kept. 
        /// Documentation https://developers.google.com/sheets/v4/reference/values/batchClear
        /// Generation Note: This does not always build corectly.  Google needs to standardise things I need to figuer out which ones are wrong.
        /// </summary>
        /// <param name="service">Authenticated Sheets service.</param>  
        /// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
        /// <param name="body">A valid Sheets v4 body.</param>
        /// <returns>BatchClearValuesResponseResponse</returns>
        public static BatchClearValuesResponse BatchClear(SheetsService service, string spreadsheetId, BatchClearValuesRequest body)
        {
            try
            {
                // Initial validation.
                if (service == null)
                    throw new ArgumentNullException("service");
                if (body == null)
                    throw new ArgumentNullException("body");
                if (spreadsheetId == null)
                    throw new ArgumentNullException(spreadsheetId);

                // Make the request.
                return service.Values.BatchClear(body, spreadsheetId).Execute();
            }
            catch (Exception ex)
            {
                throw new Exception("Request Values.BatchClear failed.", ex);
            }
        }

        
	}
		public static class SampleHelpers
    {

        /// <summary>
        /// Using reflection to apply optional parameters to the request.  
        /// 
        /// If the optonal parameters are null then we will just return the request as is.
        /// </summary>
        /// <param name="request">The request. </param>
        /// <param name="optional">The optional parameters. </param>
        /// <returns></returns>
        public static object ApplyOptionalParms(object request, object optional)
        {
            if (optional == null)
                return request;

            System.Reflection.PropertyInfo[] optionalProperties = (optional.GetType()).GetProperties();

            foreach (System.Reflection.PropertyInfo property in optionalProperties)
            {
                // Copy value from optional parms to the request.  They should have the same names and datatypes.
                System.Reflection.PropertyInfo piShared = (request.GetType()).GetProperty(property.Name);
				if (property.GetValue(optional, null) != null) // TODO Test that we do not add values for items that are null
					piShared.SetValue(request, property.GetValue(optional, null), null);
            }

            return request;
        }
    }
}